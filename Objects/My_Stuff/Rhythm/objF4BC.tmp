[gd_scene load_steps=5 format=3 uid="uid://217w6xn3mimm"]

[ext_resource type="Material" uid="uid://buampn6w1fimd" path="res://Objects/My_Stuff/Rhythm/objRhythmSlider.tres" id="1_7xjoe"]
[ext_resource type="Texture2D" uid="uid://dv1vehww44biv" path="res://Graphics/Sprites/My Stuff/sprRhythmBlock.png" id="1_72wtr"]

[sub_resource type="GDScript" id="GDScript_lmu2u"]
script/source = "extends Node2D

signal collided

var sound = preload(\"res://Audio/My Stuff/sndHoldNote.ogg\")

var speed = 300
var bpm = 98
var beat = 1# which beat this note should reach the middle
var end_beat = 2 # which beat the end of the slider should reach the middle
@export var x = 100
var direction = \"up\" # up, down
var global_offset = 0
var size = 2 # this is specifically for the buffer for the start and end
var flip = false
var slider_skew = 0.8
var time_offset = 0

var x_offset # after handling skews
var y_offset # after handling skews
var has_collided = false
var collision_point
var local_collision_point
var slider_position_at_collision
var touch_position_at_collision
var max_touch_length
var half_size
var sliderBottomTouched = false # prevent scoring multiple times

var flipped_shader = preload(\"res://Objects/My_Stuff/Rhythm/objRhythmSliderFlipped.tres\")

# calculations
var seconds_per_beat # 60 / bpm
var time_to_reach_middle
var music_time

var is_currently_colliding = false

# Called when the node enters the scene tree for the first time.
func _ready():

	# set initial position here
	seconds_per_beat = 60.0/bpm
	time_to_reach_middle = (beat * seconds_per_beat) + time_offset
	handle_shape()
	resync_rhythm_position()

func get_global_offset():
	global_offset = GLOBAL_SETTINGS.MUSIC_OFFSET/1000.0

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _physics_process(delta):
	if direction == \"up\":
		global_translate(Vector2(0,-speed*delta))
	elif direction == \"down\":
		global_translate(Vector2(0,speed*delta))
	pass
	music_time += delta
	
	on_the_beat()
	handle_sound()
	delete_when_finished()


func resync_rhythm_position():
	get_global_offset()
	time_to_reach_middle = (beat * seconds_per_beat) + time_offset + global_offset
	music_time = GLOBAL_MUSIC.get_playback_position() + AudioServer.get_time_since_last_mix() - AudioServer.get_output_latency()
	var distance = (time_to_reach_middle - music_time) * speed
	if direction == \"up\":
		set_global_position(Vector2(x-x_offset,320 + y_offset + distance))
	elif direction == \"down\":
		set_global_position(Vector2(x-x_offset,320 + y_offset - distance))

func _on_timer_timeout():
	resync_rhythm_position()

func on_the_beat():
	if fmod(music_time, seconds_per_beat) < 0.2:
		var mod = 1.5 - (fmod(music_time, seconds_per_beat) * 2.5)
		$Sprite2D.modulate = Color(mod, mod, mod)
		$SliderTouch.modulate = Color(mod, mod, mod)
		$SliderTop.modulate = Color(mod, mod, mod)
		$SliderBottom.modulate = Color(mod, mod, mod)
	else:
		$Sprite2D.modulate = Color(1,1,1)
		$SliderTouch.modulate = Color(1,1,1)
		$SliderTop.modulate = Color(1,1,1)
		$SliderBottom.modulate = Color(1,1,1)

func on_time():
	var distance_to_middle = music_time - time_to_reach_middle
	if distance_to_middle >= 0 && distance_to_middle < 0.4:
		var scale_factor = 1 + ((0.4-distance_to_middle) * 2.5)
		scale = Vector2(scale_factor, scale_factor)
		print(\"dtm = \" + str(distance_to_middle) + \", y = \" + str(position.y))
	else:
		scale = Vector2(1,1)

func on_player_collision(_player, collision):
	# only consider collisions on the side with the strip
	if (collision.get_normal().x > 0 && !flip) || (collision.get_normal().x < 0 && flip):
		is_currently_colliding = true
		# this part is a mess, i don't remember what this was for
		var position_thingy = -35 - (20*slider_skew)
		if flip:
			position_thingy = 35 + (20*slider_skew)
			
		# make a mark where the first collision was made and set up initial values
		if !has_collided:
			collision_point = collision.get_position()
			collision_point.y += 10 # counters how collision is usually made at top of head
			has_collided = true

			$SliderTouch.global_position = Vector2(collision_point.x + position_thingy, collision_point.y)
			slider_position_at_collision = global_position
			touch_position_at_collision = $SliderTouch.position
			max_touch_length = (global_position.y+half_size)-collision_point.y
		
			# if first touch is in the top slider, make it blue
			if collision_point.y < (global_position.y - half_size) + size*32:
				$SliderTop.set_region_rect(Rect2(32,0,32,size*32))
				collided.emit(\"sliderTop\")
		# extend the collision slider
		else:
			var touchRect = $SliderTouch.get_region_rect()
			var new_size = slider_position_at_collision.y - global_position.y
			touchRect.size = Vector2(32, min(new_size, max_touch_length))
			$SliderTouch.set_region_rect(touchRect)

			# size increases up and down, so need to reposition slider by half the size increase
			# 0.1 seems needed for some reason
			if touchRect.size.y < max_touch_length-0.1:
				$SliderTouch.position.x = touch_position_at_collision.x + (slider_position_at_collision.y - global_position.y)*-slider_skew/2
				$SliderTouch.position.y = touch_position_at_collision.y + (slider_position_at_collision.y - global_position.y)/2
			
				# would take too long to find actual value that uses skew, this likely needs to change if skew changes
				if !flip:
					$SliderTouch.position.x += 24
				else:
					$SliderTouch.position.x -= 1
			
			# if colliding with the bottom of slider, turn sliderbottom blue
			if collision_point.y > (global_position.y + half_size) - size*32 && !sliderBottomTouched:
				$SliderBottom.set_region_rect(Rect2(32,0,32,size*32))
				collided.emit(\"sliderBottom\")
				sliderBottomTouched = true
			# otherwise score 1 point for every frame touching the non-top or bottom
			elif collision_point.y > (global_position.y - half_size) + size*32 && !sliderBottomTouched:
				collided.emit(\"sliderBody\")


func delete_when_finished():
	#if direction  == \"up\" && position.y < -1000:
	#	queue_free()
	#elif direction == \"down\" &&  position.y > 700:
	#	queue_free()
	pass
		
func handle_shape():
	var dist = size * 16 # distance of buffer from top of slider to very top, and same for bottom
	var start_beat_to_finish_beat = (end_beat - beat) * seconds_per_beat * speed # distance from start beat to end beat (not including buffers)
	y_offset = start_beat_to_finish_beat/2 # how much to move slider up to make the top the designated position
	x_offset = y_offset * slider_skew # how much to move the slider sideways to make the top the designated position
	var total_size = start_beat_to_finish_beat + dist + dist # actual pixels from very top to very bottom
	half_size = total_size/2

	$Sprite2D.set_region_rect(Rect2(96,0,32,total_size))
	
	if flip:
		slider_skew *= -1
		$Sprite2D.flip_h = true
		$Sprite2D.set_material(flipped_shader) 
		$SliderTouch.flip_h = true
		$SliderTouch.set_material(flipped_shader) 
		$SliderTop.flip_h = true
		$SliderTop.set_material(flipped_shader) 
		$SliderBottom.flip_h = true
		$SliderBottom.set_material(flipped_shader) 
		x_offset *= -1
	
	$Sprite2D.material.set_shader_parameter(\"skew\", abs(slider_skew))
	
	# relative to middle
	var topLeft = Vector2(-16 + half_size*slider_skew, -half_size)
	var topRight = Vector2(16 + half_size*slider_skew, -half_size)
	var bottomRight = Vector2(16 - half_size*slider_skew, half_size)
	var bottomLeft = Vector2(-16 - half_size*slider_skew, half_size)
	
	$RigidBody2D/CollisionPolygon2D.set_polygon(
		PackedVector2Array([topLeft, topRight, bottomRight, bottomLeft])
	)
	
	# set the top and bottom
	$SliderTop.set_region_rect(Rect2(0,0,32,size*32))
	$SliderBottom.set_region_rect(Rect2(0,0,32,size*32))
	$SliderTop.translate(Vector2(x_offset, -y_offset))
	$SliderBottom.translate(Vector2(-x_offset, y_offset))
	
func handle_sound():
	if is_currently_colliding:
		print_debug(is_currently_colliding)
		GLOBAL_SOUNDS.play_looping_sound(sound)
	else:
		GLOBAL_SOUNDS.stop_looping_sound(sound)
	is_currently_colliding = false;

"

[sub_resource type="GDScript" id="GDScript_nf7oe"]
script/source = "extends StaticBody2D

var collided = false

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass

func on_player_collision(player, collision):
	if !collided:
		#collided = true
		get_parent().on_player_collision(player, collision)
"

[node name="objRhythmSlider" type="Node2D"]
z_index = 1
script = SubResource("GDScript_lmu2u")

[node name="RigidBody2D" type="StaticBody2D" parent="."]
collision_layer = 2
collision_mask = 0
script = SubResource("GDScript_nf7oe")

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="RigidBody2D"]
polygon = PackedVector2Array(-16, -16, 16, -16, 16, 16, -16, 16)

[node name="Sprite2D" type="Sprite2D" parent="."]
texture_repeat = 2
material = ExtResource("1_7xjoe")
texture = ExtResource("1_72wtr")
region_enabled = true
region_rect = Rect2(96, 0, 32, 32)

[node name="SliderTouch" type="Sprite2D" parent="."]
z_index = 2
texture_repeat = 2
material = ExtResource("1_7xjoe")
texture = ExtResource("1_72wtr")
region_enabled = true
region_rect = Rect2(32, 0, 32, 0)

[node name="SliderTop" type="Sprite2D" parent="."]
z_index = 1
texture_repeat = 2
material = ExtResource("1_7xjoe")
texture = ExtResource("1_72wtr")
region_enabled = true
region_rect = Rect2(0, 0, 32, 32)

[node name="SliderBottom" type="Sprite2D" parent="."]
z_index = 1
texture_repeat = 2
material = ExtResource("1_7xjoe")
texture = ExtResource("1_72wtr")
region_enabled = true
region_rect = Rect2(0, 0, 32, 32)

[node name="Timer" type="Timer" parent="."]
wait_time = 0.5
autostart = true

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Area2D"]
polygon = PackedVector2Array(-4, -16, 4, -16, 4, 16, -4, 16)

[connection signal="timeout" from="Timer" to="." method="_on_timer_timeout"]
