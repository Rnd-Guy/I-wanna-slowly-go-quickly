[gd_scene load_steps=5 format=3 uid="uid://217w6xn3mimm"]

[ext_resource type="Material" uid="uid://buampn6w1fimd" path="res://Objects/My_Stuff/Rhythm/objRhythmSlider.tres" id="1_7xjoe"]
[ext_resource type="Texture2D" uid="uid://dv1vehww44biv" path="res://Graphics/Sprites/My Stuff/sprRhythmBlock.png" id="1_72wtr"]

[sub_resource type="GDScript" id="GDScript_lmu2u"]
script/source = "extends Node2D

var speed = 300
var bpm = 98
var beat = 1# which beat this note should reach the middle
var x = 100
var direction = \"up\" # up, down
var offset = 0
var size = 2
var flip = false
var slider_skew = 0.8

var flipped_shader = preload(\"res://Objects/My_Stuff/Rhythm/objRhythmSliderFlipped.tres\")

# calculations
var seconds_per_beat # 60 / bpm
var time_to_reach_middle
var music_time

# Called when the node enters the scene tree for the first time.
func _ready():
	handle_shape()

	# set initial position here
	seconds_per_beat = 60.0/bpm
	time_to_reach_middle = beat * seconds_per_beat
	
	resync_rhythm_position()
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _physics_process(delta):
	if direction == \"up\":
		global_translate(Vector2(0,-speed*delta))
	elif direction == \"down\":
		global_translate(Vector2(0,speed*delta))
	pass
	music_time += delta
	
	on_the_beat()
	#on_time()
	delete_when_finished()


func resync_rhythm_position():
	#seconds_per_beat = 60.0/beat
	time_to_reach_middle = beat * seconds_per_beat
	music_time = GLOBAL_MUSIC.get_playback_position() + AudioServer.get_time_since_last_mix() - AudioServer.get_output_latency()
	#var music_time = GLOBAL_MUSIC.get_memoized_position()
	#var distance = time_to_reach_middle * speed
	var distance = (time_to_reach_middle - music_time) * speed
	if direction == \"up\":
		set_global_position(Vector2(x,320 + offset + distance))
	elif direction == \"down\":
		set_global_position(Vector2(x,320 + offset - distance))

func _on_timer_timeout():
	resync_rhythm_position()
	pass # Replace with function body.

func on_the_beat():
	if fmod(music_time, seconds_per_beat) < 0.2:
		var mod = 1.5 - (fmod(music_time, seconds_per_beat) * 2.5)
		$Sprite2D.modulate = Color(mod, mod, mod)
	else:
		$Sprite2D.modulate = Color(1,1,1)

func on_time():
	var distance_to_middle = music_time - time_to_reach_middle
	if distance_to_middle >= 0 && distance_to_middle < 0.4:
		var scale_factor = 1 + ((0.4-distance_to_middle) * 2.5)
		scale = Vector2(scale_factor, scale_factor)
		print(\"dtm = \" + str(distance_to_middle) + \", y = \" + str(position.y))
	else:
		scale = Vector2(1,1)

func on_player_collision(player, collision):
	#print(\"test\")
	$Sprite2D.set_region_rect(Rect2(32,0,32,size*32))

func delete_when_finished():
	if direction  == \"up\" && position.y < -100:
		queue_free()
	elif direction == \"down\" &&  position.y > 700:
		queue_free()
		
func handle_shape():
	var dist = size * 16 # distance to top and bottom from middle
	if size != 1:
		#$RigidBody2D/CollisionShape2D.shape.set_size(Vector2(32,size*32))
		$Sprite2D.set_region_rect(Rect2(0,0,32,size*32))
	
	if flip:
		slider_skew *= -1
		$Sprite2D.flip_h = true
		$Sprite2D.set_material(flipped_shader) 
	
	var edge_skew = dist * slider_skew # how much the skew moves the slider left or right
	$Sprite2D.material.set_shader_parameter(\"skew\", abs(slider_skew))
	$RigidBody2D/CollisionPolygon2D.set_polygon(
		PackedVector2Array([
			Vector2(-16+edge_skew,-dist), #top left
			Vector2(16+edge_skew,-dist), # top right
			Vector2(16-edge_skew,dist), # bottom right
			Vector2(-16-edge_skew,dist), # bottom left
		])
	)
	
	# makes the top of the slider the position that is set
	global_translate(Vector2(-edge_skew, 0))
"

[sub_resource type="GDScript" id="GDScript_nf7oe"]
script/source = "extends StaticBody2D

var collided = false

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass

func on_player_collision(player, collision):
	if !collided:
		collided = true
		get_parent().on_player_collision(player, collision)
"

[node name="objRhythmSlider" type="Node2D"]
script = SubResource("GDScript_lmu2u")

[node name="RigidBody2D" type="StaticBody2D" parent="."]
collision_layer = 2
collision_mask = 0
script = SubResource("GDScript_nf7oe")

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="RigidBody2D"]
polygon = PackedVector2Array(-16, -16, 16, -16, 16, 16, -16, 16)

[node name="Sprite2D" type="Sprite2D" parent="."]
texture_repeat = 2
material = ExtResource("1_7xjoe")
texture = ExtResource("1_72wtr")
region_enabled = true
region_rect = Rect2(0, 0, 32, 32)

[node name="Timer" type="Timer" parent="."]
wait_time = 0.5
autostart = true

[node name="TimingGlow" type="Timer" parent="."]
wait_time = 0.1
one_shot = true

[connection signal="timeout" from="Timer" to="." method="_on_timer_timeout"]
