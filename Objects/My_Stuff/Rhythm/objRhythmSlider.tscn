[gd_scene load_steps=5 format=3 uid="uid://217w6xn3mimm"]

[ext_resource type="Material" uid="uid://buampn6w1fimd" path="res://Objects/My_Stuff/Rhythm/objRhythmSlider.tres" id="1_7xjoe"]
[ext_resource type="Texture2D" uid="uid://dv1vehww44biv" path="res://Graphics/Sprites/My Stuff/sprRhythmBlock.png" id="1_72wtr"]

[sub_resource type="GDScript" id="GDScript_lmu2u"]
script/source = "extends Node2D

var speed = 300
var bpm = 98
var beat = 1# which beat this note should reach the middle
var end_beat = 2 # which beat the end of the slider should reach the middle
var x = 100
var direction = \"up\" # up, down
var global_offset = 0
var size = 2 # this is specifically for the buffer for the start and end
var flip = false
var slider_skew = 0.8

var x_offset # after handling skews
var y_offset # after handling skews

var flipped_shader = preload(\"res://Objects/My_Stuff/Rhythm/objRhythmSliderFlipped.tres\")

# calculations
var seconds_per_beat # 60 / bpm
var time_to_reach_middle
var music_time

# Called when the node enters the scene tree for the first time.
func _ready():

	# set initial position here
	seconds_per_beat = 60.0/bpm
	time_to_reach_middle = beat * seconds_per_beat
	
	
	handle_shape()
	
	resync_rhythm_position()
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _physics_process(delta):
	if direction == \"up\":
		global_translate(Vector2(0,-speed*delta))
	elif direction == \"down\":
		global_translate(Vector2(0,speed*delta))
	pass
	music_time += delta
	
	on_the_beat()
	#on_time()
	delete_when_finished()


func resync_rhythm_position():
	#seconds_per_beat = 60.0/beat
	time_to_reach_middle = beat * seconds_per_beat
	music_time = GLOBAL_MUSIC.get_playback_position() + AudioServer.get_time_since_last_mix() - AudioServer.get_output_latency()
	#var music_time = GLOBAL_MUSIC.get_memoized_position()
	#var distance = time_to_reach_middle * speed
	var distance = (time_to_reach_middle - music_time) * speed
	if direction == \"up\":
		set_global_position(Vector2(x-x_offset,320 + global_offset + y_offset + distance))
	elif direction == \"down\":
		set_global_position(Vector2(x-x_offset,320 + global_offset + y_offset - distance))

func _on_timer_timeout():
	resync_rhythm_position()
	pass # Replace with function body.

func on_the_beat():
	if fmod(music_time, seconds_per_beat) < 0.2:
		var mod = 1.5 - (fmod(music_time, seconds_per_beat) * 2.5)
		$Sprite2D.modulate = Color(mod, mod, mod)
	else:
		$Sprite2D.modulate = Color(1,1,1)

func on_time():
	var distance_to_middle = music_time - time_to_reach_middle
	if distance_to_middle >= 0 && distance_to_middle < 0.4:
		var scale_factor = 1 + ((0.4-distance_to_middle) * 2.5)
		scale = Vector2(scale_factor, scale_factor)
		print(\"dtm = \" + str(distance_to_middle) + \", y = \" + str(position.y))
	else:
		scale = Vector2(1,1)

func on_player_collision(player, collision):
	#print(\"test\")
	var rect = $Sprite2D.get_region_rect()
	rect.position.x = 32 # position is basically the top left corner of rect2
	#$Sprite2D.set_region_rect(Rect2(32,0,32,size*32))
	$Sprite2D.set_region_rect(rect)

func delete_when_finished():
	if direction  == \"up\" && position.y < -100:
		queue_free()
	elif direction == \"down\" &&  position.y > 700:
		queue_free()
		
func handle_shape():
	var dist = size * 16 # distance of buffer from top of slider to very top, and same for bottom
	var start_beat_to_finish_beat = (end_beat - beat) * seconds_per_beat * speed # distance from start beat to end beat (not including buffers)
	y_offset = start_beat_to_finish_beat/2 # how much to move slider up to make the top the designated position
	x_offset = y_offset * slider_skew # how much to move the slider sideways to make the top the designated position
	var total_size = start_beat_to_finish_beat + dist + dist # actual pixels from very top to very bottom
	var half_size = total_size/2
	
	
	
	
	# old code
#	if size != 1:
#		$Sprite2D.set_region_rect(Rect2(0,0,32,size*32))
	# new code
	$Sprite2D.set_region_rect(Rect2(0,0,32,total_size))
	
	if flip:
		slider_skew *= -1
		$Sprite2D.flip_h = true
		$Sprite2D.set_material(flipped_shader) 
		x_offset *= -1
	
	$Sprite2D.material.set_shader_parameter(\"skew\", abs(slider_skew))

	# old code	
#	var edge_skew = dist * slider_skew # how much the skew moves the slider left or right
#	$RigidBody2D/CollisionPolygon2D.set_polygon(
#		PackedVector2Array([
#			Vector2(-16+edge_skew,-dist), #top left
#			Vector2(16+edge_skew,-dist), # top right
#			Vector2(16-edge_skew,dist), # bottom right
#			Vector2(-16-edge_skew,dist), # bottom left
#		])
#	)

	# relative to start beat
	var topLeft = Vector2(-16 + dist*slider_skew, -dist)
	var topRight = Vector2(16 + dist*slider_skew, -dist)
	var bottomRight = Vector2(16+(dist+start_beat_to_finish_beat)*slider_skew, dist)
	var bottomLeft = Vector2(-16+(dist+start_beat_to_finish_beat)*slider_skew, dist)
	
	# relative to middle
	var topLeft2 = Vector2(-16 + half_size*slider_skew, -half_size)
	var topRight2 = Vector2(16 + half_size*slider_skew, -half_size)
	var bottomRight2 = Vector2(16 - half_size*slider_skew, half_size)
	var bottomLeft2 = Vector2(-16 - half_size*slider_skew, half_size)
	
	$RigidBody2D/CollisionPolygon2D.set_polygon(
		PackedVector2Array([topLeft2, topRight2, bottomRight2, bottomLeft2])
	)
	
	# makes the top of the slider the position that is set
	#global_translate(Vector2(-edge_skew, 0))
	#global_translate(Vector2(-x_offset, y_offset))
"

[sub_resource type="GDScript" id="GDScript_nf7oe"]
script/source = "extends StaticBody2D

var collided = false

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass

func on_player_collision(player, collision):
	if !collided:
		collided = true
		get_parent().on_player_collision(player, collision)
"

[node name="objRhythmSlider" type="Node2D"]
script = SubResource("GDScript_lmu2u")

[node name="RigidBody2D" type="StaticBody2D" parent="."]
collision_layer = 2
collision_mask = 0
script = SubResource("GDScript_nf7oe")

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="RigidBody2D"]
polygon = PackedVector2Array(-16, -16, 16, -16, 16, 16, -16, 16)

[node name="Sprite2D" type="Sprite2D" parent="."]
texture_repeat = 2
material = ExtResource("1_7xjoe")
texture = ExtResource("1_72wtr")
region_enabled = true
region_rect = Rect2(0, 0, 32, 32)

[node name="Timer" type="Timer" parent="."]
wait_time = 0.5
autostart = true

[node name="TimingGlow" type="Timer" parent="."]
wait_time = 0.1
one_shot = true

[connection signal="timeout" from="Timer" to="." method="_on_timer_timeout"]
