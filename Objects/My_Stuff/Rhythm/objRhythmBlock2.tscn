[gd_scene load_steps=4 format=3 uid="uid://clphk7fk1ft5w"]

[ext_resource type="Texture2D" uid="uid://ce764rqb8dydy" path="res://Graphics/Tiles/tilAllTiles.png" id="1_tl0xv"]

[sub_resource type="GDScript" id="GDScript_lmu2u"]
script/source = "extends Node2D

var speed = 300
var bpm = 98
var beat = 1# which beat this note should reach the middle
var x = 100
var direction = \"up\" # up, down
var offset = 0

# calculations
var seconds_per_beat # 60 / bpm
var time_to_reach_middle
var music_time

# Called when the node enters the scene tree for the first time.
func _ready():
	# set initial position here
	seconds_per_beat = 60.0/bpm
	time_to_reach_middle = beat * seconds_per_beat
	
	resync_rhythm_position()
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _physics_process(delta):
	if direction == \"up\":
		global_translate(Vector2(0,-speed*delta))
	elif direction == \"down\":
		global_translate(Vector2(0,speed*delta))
	pass
	music_time += delta
	
	on_the_beat()
	#on_time()


func resync_rhythm_position():
	#seconds_per_beat = 60.0/beat
	time_to_reach_middle = beat * seconds_per_beat
	music_time = GLOBAL_MUSIC.get_playback_position() + AudioServer.get_time_since_last_mix() - AudioServer.get_output_latency()
	#var music_time = GLOBAL_MUSIC.get_memoized_position()
	#var distance = time_to_reach_middle * speed
	var distance = (time_to_reach_middle - music_time) * speed
	if direction == \"up\":
		set_global_position(Vector2(x,320 + offset + distance))
	elif direction == \"down\":
		set_global_position(Vector2(x,320 + offset - distance))

func _on_timer_timeout():
	resync_rhythm_position()
	pass # Replace with function body.

func on_the_beat():
	if fmod(music_time, seconds_per_beat) < 0.2:
		var mod = 1.5 - (fmod(music_time, seconds_per_beat) * 2.5)
		$Sprite2D.modulate = Color(mod, mod, mod)
	else:
		$Sprite2D.modulate = Color(1,1,1)

func on_time():
	var distance_to_middle = music_time - time_to_reach_middle
	if distance_to_middle >= 0 && distance_to_middle < 0.4:
		var scale_factor = 1 + ((0.4-distance_to_middle) * 2.5)
		scale = Vector2(scale_factor, scale_factor)
		print(\"dtm = \" + str(distance_to_middle) + \", y = \" + str(position.y))
	else:
		scale = Vector2(1,1)
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_weijy"]
size = Vector2(32, 32)

[node name="objRhythmBlock" type="Node2D"]
script = SubResource("GDScript_lmu2u")

[node name="RigidBody2D" type="StaticBody2D" parent="."]
collision_layer = 2
collision_mask = 0

[node name="CollisionShape2D" type="CollisionShape2D" parent="RigidBody2D"]
shape = SubResource("RectangleShape2D_weijy")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = ExtResource("1_tl0xv")
region_enabled = true
region_rect = Rect2(32, 0, 32, 32)

[node name="Timer" type="Timer" parent="."]
wait_time = 0.5
autostart = true

[node name="TimingGlow" type="Timer" parent="."]
wait_time = 0.1
one_shot = true

[connection signal="timeout" from="Timer" to="." method="_on_timer_timeout"]
